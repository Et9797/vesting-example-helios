struct testDeadlinePassedSignedByBeneficiary {
	a: Int //ignore
	
	func datum() -> Datum {
		Datum {
			beneficiary: PubKeyHash::new(#01234567890123456789012345678901234567890123456789012346),
			deadline: Time::new(1000)
		}
	}

    func redeemer() -> Redeemer {
        Redeemer{0}
    }
	
	func script_context() -> ScriptContext {
		addr_beneficiary: Address = Address::new(Credential::new_pubkey(testDeadlinePassedSignedByBeneficiary::datum().beneficiary), Option[StakingCredential]::None);
		validator_hash: ValidatorHash = ValidatorHash::new(#01234567890123456789012345678901234567890123456789012347);
		validator_addr: Address = Address::new(Credential::new_validator(validator_hash), Option[StakingCredential]::None);
		ref_id: TxOutputId = TxOutputId::new(TxId::new(#0123456789012345678901234567890123456789012345678901234567891234), 0);

		ScriptContext::new_spending(
			Tx::new(
				[]TxInput{TxInput::new(ref_id, TxOutput::new(validator_addr, Value::lovelace(10000000), OutputDatum::new_inline(testDeadlinePassedSignedByBeneficiary::datum())))},
				[]TxInput{},
				[]TxOutput{TxOutput::new(addr_beneficiary, Value::lovelace(9840000), OutputDatum::new_none())},
				Value::lovelace(160000),
				Value::ZERO,
				[]DCert{},
				Map[StakingCredential]Int{},
				TimeRange::from(Time::new(1001)),
				[]PubKeyHash{testDeadlinePassedSignedByBeneficiary::datum().beneficiary},
				Map[DatumHash]Data{}
			),
            ref_id
		)
	}	
}

const testDeadlinePassedSignedByBeneficiaryDatum: Datum = testDeadlinePassedSignedByBeneficiary::datum()
const testDeadlinePassedSignedByBeneficiaryRedeemer: Redeemer = testDeadlinePassedSignedByBeneficiary::redeemer()
const testDeadlinePassedSignedByBeneficiaryCtx: ScriptContext = testDeadlinePassedSignedByBeneficiary::script_context()


struct testDeadlinePassedNotSignedByBeneficiary {
	a: Int //ignore
	
	func datum() -> Datum {
		Datum {
			beneficiary: PubKeyHash::new(#01234567890123456789012345678901234567890123456789012346),
			deadline: Time::new(1000)
		}
	}

    func redeemer() -> Redeemer {
        Redeemer{0}
    }
	
	func script_context() -> ScriptContext {
		addr_beneficiary: Address = Address::new(Credential::new_pubkey(testDeadlinePassedNotSignedByBeneficiary::datum().beneficiary), Option[StakingCredential]::None);
		validator_hash: ValidatorHash = ValidatorHash::new(#01234567890123456789012345678901234567890123456789012347);
		validator_addr: Address = Address::new(Credential::new_validator(validator_hash), Option[StakingCredential]::None);
		ref_id: TxOutputId = TxOutputId::new(TxId::new(#0123456789012345678901234567890123456789012345678901234567891234), 0);

		ScriptContext::new_spending(
			Tx::new(
				[]TxInput{TxInput::new(ref_id, TxOutput::new(validator_addr, Value::lovelace(10000000), OutputDatum::new_inline(testDeadlinePassedNotSignedByBeneficiary::datum())))},
				[]TxInput{},
				[]TxOutput{TxOutput::new(addr_beneficiary, Value::lovelace(9840000), OutputDatum::new_none())},
				Value::lovelace(160000),
				Value::ZERO,
				[]DCert{},
				Map[StakingCredential]Int{},
				TimeRange::from(Time::new(1001)),
				[]PubKeyHash{},
				Map[DatumHash]Data{}
			),
            ref_id
		)
	}	
}

const testDeadlinePassedNotSignedByBeneficiaryDatum: Datum = testDeadlinePassedNotSignedByBeneficiary::datum()
const testDeadlinePassedNotSignedByBeneficiaryRedeemer: Redeemer = testDeadlinePassedNotSignedByBeneficiary::redeemer()
const testDeadlinePassedNotSignedByBeneficiaryCtx: ScriptContext = testDeadlinePassedNotSignedByBeneficiary::script_context()
